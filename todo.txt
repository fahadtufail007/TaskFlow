/* ToDo
-------

Compare with similar systems
  LangChain - a framework for developing applications powered by language models.
    An abstraction above JS and Python
    Standard interface to models (could reuse this)
    Model output parsing sytem (could reuse this from TaskFunction)
    Provides stores for custom data e.g. text splitter
    The workflow in Chat2Flow is like an Agent in LangChain
  GPT-Index
    Should leverage this
  Open-AI Plugins
    This is LLM centric and will allow something similar
  Auto-GPT
    https://github.com/Significant-Gravitas/Auto-GPT
    This might be the close but their focus on autonomy is quite different
  https://github.com/modal-labs/quillman
    A complete ausio chat app. Meant to serve as a starting point for your own language model-based apps.
  https://gradio.app/
    It would ideally be easy to use a Gradio component
    Embed in an iFrame
  Algovera
    Not open sourced (yet)
  
Backlog
-------

  Bugs
  -----
  Scrolling to view suggested_prompts in TaskChat
  Cleanup the initial authentication experience

  Features
  --------
    High Priority
    -------------
    Workflow features:
      Allow the user to specify the system prompt.
      Use a route for configuring: user, session, workflow, task
    Create a new route for the Client side user defaults. Manage in a global state. Send on all requests.
    Msgs could be loaded from the server. Similar to stepper - both have history.
    Allow task to start another task on server side (needs functional interface to api/task/start )

    Components
    ----------
    MyAgents -> MyAgentConversation

    Low Priority
    ------------
    Way for tasks to register websocket event handlers
    Multiple language support 'i18next-http-middleware for server and react-i18next for client
    Defensive programming + logging
    Websocket for tasks (so server can drive) just send incremental info for the task
    Replace globalState with Redux

Notes/Idea
-----
  Possible hierarchy of configuration:
  Defaults
    User (Route)
      Session
        Workflow (Route)
          User Workflow
            Session Workflow
              Task 
                User Task
                  Session Task
  Asking the model to output in a format that would pass a test might be a software good way of constraining prmopts
    e.g. provide Python/JS code that the output should pass (e.g. a single word)

  Architecture
  ------------
    How to manage multiple interfaces for a Task
        Sub-directory with sub-components and a style or theme
    Tasks can be thought of as something like plugins, maybe there are patterns in that sort of software
        Implies catalog, installation, activation, configuration, updates, permissions, resource limits
        Requires a documented API, the basic principles at the moment:
            Use the Task object to pass information
            Manage task specific storage (e.g. files, user specific data) independently of the server Stores
            Through JS imports the TaskFunction has access to:
                config.mjs
                src/configdata.mjs (users, groups, workflows, components, agents, defaults, tasks)
                src/utils.mjs
                src/storage.mjs (messagesStore_async, sessionsStore_async, cacheStore_async, instancesStore_async, threadsStore_async, connections)
                src/websocket.js (wsSendObject)
                .env
    User defaults, workflow defaults etc can be tasks
    Could add middleware that tasks can use to modify input/output (similar to LangChain)
      Currently in the TaskFunction but should be easy to factor out when that makes sense
    How does a task monitor other tasks ? Callback to monitor a thread or a task (middleware catch updates to instance store)
      Maybe tasks are responsible for their own communication protocol 
      Pattern of having the parent own the state? That allows for communication.
      In React this is fairly easy. On the server this could be a pub-sub system. The common point is asynchronous messages.
    Should the geolocation be a task? It could still update the globalState on the client side
    How to call out to Python from the Task function
      "child process execution" with child_process library
      RabbitMQ for message passing good for a local model but do we need high speed, probably not.
      REST API would allow for remote etc, maybe better
      AMQP or MQTT would be more scalable.

  Issues
  ------
    Tasks run with full server rights. They should be sandboxed on the server.
        TaskFunction could run in a docker container
        Each TaskFunction could be a user on Linux
            User could run in a restricted environment e.g. firejail, bubblewrap
    Administation/monitoring of Chat2Flow, could ping a service that alerts to problems
    Is there a place for a scripting interfaec? Shell that understands Tasks.
    Structure of the Task object:
        * Shared between client and server:
            * `id`
            * `component` 
            * `component_depth` 
            * `next`  
            * `forget`  
            * `name`  
            * `label`  
            * `instanceId`  
            * `threadId`  
            * `children`  
            * `done`  
            * `steps`  
            * `step`  
            * `next_step` 
            * `menu`  
            * `update_count` 
        * Server side only:
            * `APPEND_*`
            * `PREPEND_*` 
            * `parent` 
            * `parentId` 
            * `parentInstanceId` 
            * `agent` 
            * `groups` 
            * `parentId` 
            * `sessionId` 
            * `created` 
            * `userId` 
            * `prompt` 
            * `assemble_prompt` 
            * `last_change` 
            * `update` 
            * `delta_step` 
            * `messages_template` 
            * `messages`

Here is the recommended structure from GPT-4:

{
  "id": "", // Unique identifier for the task (e.g., UUID)
  "type": "", // Task type or category, useful for handling tasks differently based on their nature
  "name": "", // Human-readable name or title of the task
  "description": "", // Brief description of the task and its purpose
  "status": "", // Current status of the task (e.g., "pending", "in-progress", "completed", "error")
  "priority": 0, // Priority level of the task, useful for determining the order of task execution
  "createdAt": "", // Timestamp when the task was created
  "updatedAt": "", // Timestamp when the task was last updated
  "completedAt": "", // Timestamp when the task was completed (if applicable)
  "input": {}, // Input data for the task, can be any JSON-serializable data
  "output": {}, // Output data from the task, can be any JSON-serializable data
  "error": null, // Any error message or details in case the task encounters an error
  "metadata": {}, // Additional metadata related to the task, can be any JSON-serializable data
  "dependencies": [], // Array of task IDs that this task depends on (if any)
  "nextTasks": [] // Array of task IDs that should be executed after this task (if any)
}


  Infra
  -----
  Run prod version instead of dev
  https://modal.com/

-------
*/