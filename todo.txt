/* ToDo
-------
baseType and type is confusing
permissions is unclear

One idea is to "flatten" the Task object on the Task Processor. Maybe this does not matter if access if wrapped by the Task processor.
The infrastructure provided by the Task Processor should perform the updates to the Task object as this allows for services to be provided upon value changes.
Document what the infrastructure is expected to provide - harmonise the Task Processor (both are just Task processors)
  In React withTask HOC with useTask state.
  A common JS module for managing the Task object. What can be generic to Task Processors and what is custom?
  Task2Flow adds the concept of sessionId and address/location. Maybe the Task Processor could have a schema or set of functions.
  
Does the update actually update (deep merge) or does it replace?
Privacy feature of Task is not implemented. 
Rather than a JS hierarchy we might be better to use KeyV mapping e.g. response_text etc 
How to reference values from previous Tasks - available in "output"
If we put a T at the beginning of each Task parameter it would be easier to update with search & replace
  Better to use full path even in JXS e.g. task.name not name e.g in workflows and stepper
The chat.mjs is like an internal request? Make it part of TaskChat not TaskFromAgent (rename this to TaskTextIO)
How can we specify the UI in a more compact/easy way?
  https://github.com/rjsf-team/react-jsonschema-form
  If you're looking for a performant, hook-based solution with minimal boilerplate, React Hook Form is a great choice.
Think about how to have a task deal with compound react components
  config: list of components (with names) for display&input, mapping inputs to request.name.inputs
  config: list of components (with names) for display, mapping to response.name.outputs (if it is displaying a return)
  Basic pattern is: display -> input -> display -> input (can choose to use a subset)
  Could associate components with state of the Task ?
         * -> list of components that are active all the time
    state1 -> list of active components
    state2 -> list of active components
Consider how we would add a radio select box to a component
  Add the component and a config option to display or not
  Dynamic mapping of config to the input
  Standard way of mapping this to response. Make these available as variable in next Task (or state?)
Can we have the same React component present a new Task? I guess it does that automatically (carry the previous output along)
  In this case the patterns of display then input or input then display should be enough.
Could have tasks that fill out a higher presentation task - like the stepper

Backlog
-------

  Bugs
  -----
  Scrolling to view suggested_prompts in TaskChat
  Cleanup the initial authentication experience

  Features
  --------
    High Priority
    -------------
    Simplify multiple configuration files for the nodejsProcessor
    Use a route for configuring: user, session, workflow, task
    Create a new route for the Client side user defaults. Manage in a global state. Send on all requests.
    Msgs could be loaded from the nodejsProcessor. Similar to stepper - both have history.
    Allow task to start another task on nodejsProcessor side (needs functional interface to api/task/start )
    Utility filters e.g. remove outer quotes, an ordered list.

    Tasks
    ----------
    MyAgents -> MyAgentConversation
    Multiple-choice above prompt to allow for quick refining of prompt e.g. use tutoiment, friendly, formal etc
    Templating with user defined variables
    Assistant to help understanding a problem rather than solving the problem
        Gamification to make learning more engaging
        An assistant to help explaining what the problem is
    Research assistant

    Low Priority
    ------------
    Move to TypeScript
    Way for tasks to register websocket event handlers
    Multiple language support 'i18next-http-middleware for nodejsProcessor and react-i18next for browserProcessor
    Defensive programming + logging
    Websocket for tasks (so nodejsProcessor can drive) just send incremental info for the task
    Replace globalState with Redux
    When sending task instance only send diff (browserProcessor keeps nodejsProcessor copy, nodejsProcessor keeps browserProcessor copy)
    Add task type validation to websocket

Notes/Idea
-----
  Rename to T@sk, T@ask TaskNet, TaskFlow (but htere is already https://github.com/taskflow/taskflow) T@skFlow
  Possible hierarchy of configuration:
  Defaults
    User (Route)
      Session
        Workflow (Route)
          User Workflow
            Session Workflow
              Task
                User Task
                  Session Task
  Asking the model to output in a format that would pass a test might be a software good way of constraining prmopts
    e.g. provide Python/JS code that the output should pass (e.g. a single word)
  How to interface with other apps with output from Chat@Flow ?
  Things will be integrated into existing clients (e.g. email)
  Educate the users to make use of the system

Architecture
------------
  How to manage multiple interfaces for a Task
      Sub-directory with sub-components and a style or theme
  Tasks can be thought of as something like plugins, maybe there are patterns in that sort of software
      Implies catalog, installation, activation, configuration, updates, permissions, resource limits
      Requires a documented API, the basic principles at the moment:
          Use the Task object to pass information
          Manage task specific storage (e.g. files, user specific data) independently of the nodejsProcessor Stores
          Through JS imports the TaskFunction has access to:
              config.mjs
              src/configdata.mjs (users, groups, workflows, components, agents, defaults, tasks)
              src/utils.mjs
              src/storage.mjs (messagesStore_async, sessionsStore_async, cacheStore_async, instancesStore_async, threadsStore_async, connections)
              src/websocket.js (wsSendObject)
              .env
  User defaults, workflow defaults etc can be tasks
  Could add middleware that tasks can use to modify input/output (similar to LangChain)
    Currently in the TaskFunction but should be easy to factor out when that makes sense
  How does a task monitor other tasks ? Callback to monitor a thread or a task (middleware catch updates to instance store)
    Maybe tasks are responsible for their own communication protocol 
    Pattern of having the parent own the state? That allows for communication.
    In React this is fairly easy. On the nodejsProcessor this could be a pub-sub system. The common point is asynchronous messages.
  How to call out to Python from the Task function (better to create a Python Task and have the nodejsProcessor provide the environment?)
    "child process execution" with child_process library
    RabbitMQ for message passing good for a local model but do we need high speed, probably not.
    REST API would allow for remote etc, maybe better
    AMQP or MQTT would be more scalable.

Issues
------
  Tasks run with full nodejsProcessor rights. They should be sandboxed on the nodejsProcessor.
      TaskFunction could run in a docker container
      Each TaskFunction could be a user on Linux
          User could run in a restricted environment e.g. firejail, bubblewrap
  Administation/monitoring of Chat@Flow, could ping a service that alerts to problems

Comparison with similar systems
----------------------------
  LangChain - a framework for developing applications powered by language models.
    An abstraction above JS and Python
    Standard interface to models (could reuse this)
    Model output parsing sytem (could reuse this from TaskFunction)
    Provides stores for custom data e.g. text splitter
    The workflow in Chat@Flow is like an Agent in LangChain
  GPT-Index
    Should leverage this
  Open-AI Plugins
    This is LLM centric and will allow something similar
  Auto-GPT
    https://github.com/Significant-Gravitas/Auto-GPT
    This might be the close but their focus on autonomy is quite different
  https://github.com/modal-labs/quillman
    A complete audio chat app. Meant to serve as a starting point for your own language model-based apps.
  https://gradio.app/
    It would ideally be easy to use a Gradio component
    Embed in an iFrame
  Algovera
    Not open sourced (yet)
