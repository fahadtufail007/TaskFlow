/* ToDo
-------
Code refactoring
  Single place where NodeJS provides fetchTask (like in React)
  configdata
    Prepending "root." is not cool for configdata like users and groups
      If there is no parent then consider to be root ? Then do not require root.
  Hub pipeline: a module with function for each step
    Will help for filtering
Review of READMEs
Evaluate Codeium 

The stack of components for React should not be mixed with a stack of Tasks.
  Stack of components should be in the task.config
Requests from other tasks via: task.processor.task.request
  See notes
Could be valuable to communicate with an instance on a subset of environments
If we have a TaskFilter this raises the question of how to configure/program it.
  Detects an event and passes information.
    Filter -> action
      Action is to update another task ?
        How to inform another task
        If we do want a DSL the Lua might be a good option for language indepedence
          https://github.com/fengari-lua/fengari-web
Do we want a join route on Hub for symmetry? Join is internal to the hub?
chatContainermaxHeight in TaskConversation scrolling?
Modify the partial text update so it is incremental. This will better allow for text selection.
  Something like react-markdown with the gfm plugin for things like tables but you will need to do some extra work to get the code blocks styled exactly how you are wanting
Show websocket connection status with traffic light icon
Integrate https://rapidapi.com/products/api-hub/
Maybe start can be missed like update
  Get all the WS working this way
  Add queue to other React WS filters
Possible next feature: remembering the system messages for Vierge
Provide sample of nginx proxy config
Need to be able to force a task to restart (Hub command?) Could be a forget button.
log not working in Chrome
Transaction might be a better concept than lock, then don't need bypass.
Re-architect the react Processor to make use of the Service Worker API
  Should have React Hub
  Progressive Web Apps https://developer.chrome.com/docs/workbox/
  ServiceWorker will intercept any HTTP request from a client except WebSocket upgrade requests
  Workbox is built into Create React App (CRA) with a default configuration that precaches all the static assets.
    "react-scripts": "5.0.1"
  Redux State Sync might provide many of these benefits
    Have one tab that is "master" and others as slaves that pass requests to master.
    https://www.howtogeek.com/devops/how-to-sync-a-redux-store-across-browser-tabs/
    This is a different architecture in that all tabs communicate with the server and Redux is synchronized
  Could detect when more than one tab is open then route websocket from one master tab to shared worker then on to slave tabs
    https://github.com/pubkey/broadcast-channel seems good - it provides LeaderElection
    Basically the leader broadcasts what it receives on websocket and forwards what it received on the channel
      The websocket context just needs to decide which to use (depending on whether it is the leader)
      It seems OK to let the HTTP requests go through, eventaully the session could be managed by the Processor
        Then just use the thread to allow different tabs to have the same task
Make some basic commands available in the console (add function to window)
  Set the userId
Standard for asynchronous APIs 
  https://www.asyncapi.com/ (standard )
Ideally we want the same code for Task storage on Hub/React/NodeJs
  Could use @kvs/node-localstorage
Demo of collaborative chat would be good.
  In default config assign a random user label so we can demo multiparty chat
Add function to remove last paragraph
  Interesting to explore how that might be done
A new conversation button once we have the session restoring.
Address is just a part of a task state
  Raises the idea of a task setting user information on the hub
    Or should there be a Task to do that?
Privacy - should only be implemented on the Hub
  Hub and Processors need to have secure communication, then identification is managed on the hub.
Embedding functions in the template? Use ejs, could also have a template for the output e.g. post-processing.
  Where/how to manage variables? 
    Lookup only the required tasks not the whole thread.
  What about use across languages?
    Logic-less might be better: Handlebars
Harmonise the Task Processor
  The infrastructure provided by the Task Processor should perform the updates to the Task object as this allows for services to be provided upon value changes.
  In React withTask HOC and useTask state.
  A common JS module for managing the Task object. 
    What is generic to Task Processors and what is custom?
      React Processor adds the concept of address/location.
When should we introduce Typescript?
  First try to simplify the code
Tests will allow for better code generation
If we prefix a T on Task parameters it would be easier to update with search & replace
  Better to use full path even in JXS e.g. task.name not name e.g in taskflows and stepper
How can we specify the UI in a more compact/easy way?
  https://github.com/rjsf-team/react-jsonschema-form
  A hook-based solution with minimal boilerplate: React Hook Form
How to have a task deal with compound react components
  config: list of components (with names) for display&input, mapping inputs to request.name.inputs
  config: list of components (with names) for display, mapping to response.name.outputs (if it is displaying a return)
  Basic pattern is: display -> input -> display -> input (can choose to use a subset)
  Could associate components with state of the Task ?
         * -> list of components that are active all the time
    state1 -> list of active components
    state2 -> list of active components
Consider how we would add a radio select box to a component
  Add the component and a config option to display or not
  Dynamic mapping of config to the input
  Standard way of mapping this to response. Make these available as variable in next Task (or state?)
Can we have the same React component present a new Task? I guess it does that automatically (carry the previous output along)
  In this case the patterns of display then input or input then display should be enough. TaskIO

Backlog
-------

  Bugs
  -----
  Scrolling to view suggested_prompts in TaskChat

  Features
  --------
    High Priority
    -------------
    Simplify multiple configuration files for the NodeJS Task Processor
    Use a route for configuring: user, session, taskflow, task
    Create a new route for the Client side user defaults. Manage in a global state. Send on all requests.
    Msgs could be loaded from the NodeJS Task Processor. Similar to stepper - both have history.
    Utility filters e.g. remove outer quotes, an ordered list (use a standard templating library - ejs)
    When user interacts reset the counter to try to establish websocket on client

    Low Priority
    ------------
    Align usage of utils
    Time in oneFamily messages should be aligned with browser timezone (needs to be filled in by Hub?)
    Logout option (could just be a route)
    Sending diff to Hub from Processor during update
    JWT connection between Task Hub and Processors (currently rely on Cloudflare)
    Move to TypeScript
    Way for tasks to register websocket event handlers
    Multiple language support 'i18next-http-middleware for NodeJS Task Processor and react-i18next for React Task Processor
    Defensive programming + logging
    Websocket for tasks (so NodeJS Task Processor can drive) just send incremental info for the task
    Replace globalState with Redux
    When sending task instance only send diff (React Task Processor keeps NodeJS Task Processor copy, NodeJS Task Processor keeps React Task Processor copy)
    Add task type validation to websocket
    Only display menu option if leaf is a real task
    Check '.' is not used in keys or it breaks setNestedProperties (test if the JSON schema is now doing this)

    Tasks
    ----------
    MyAssistant -> MyAssistantConversation
    Multiple-choice above prompt to allow for quick refining of prompt e.g. use tutoiment, friendly, formal etc
    Templating with user defined variables
    Assistant to help understanding a problem rather than solving the problem
      Gamification to make learning more engaging
      An assistant to help explaining what the problem is
    Research assistant
    Refactoring assistant (provide a duplicate code environment as the Task Environment)
      Example of the refactoring provided.
      LLM to explain the refactoring
      LLM to identify which files should be refactored
      Apply refactoring
        Syntax check as code is produced? 
        Fix for syntax errors
    Fetch prompt suggestion

Notes/Idea
-----
  Possible hierarchy of configuration:
  Defaults
    User (Route)
      Session
        Taskflow (Route)
          User Taskflow
            Session Taskflow
              Task
                User Task
                  Session Task
  Asking the model to output in a format that would pass a test might be a software good way of constraining prmopts
    e.g. provide Python/JS code that the output should pass (e.g. a single word)
  How to interface with other apps with output from T@skFlow ?
    Windows accessibility APIs, such as UI Automation or MSAA (Microsoft Active Accessibility)
  Things will be integrated into existing clients (e.g. email)
  Educate the users to make use of the system
  One idea is to "flatten" the Task object on the Task Processor. Maybe this does not matter if access if wrapped by the Task processor.
  Writing the Hub and a generic Porcessor in Rust
  Can we inherit/build on React or NodeJS Task Function?
  No easy way to do this with React in the functional style
    In te distant future we could build components on the fly
  Could have a task.family entry which allows for broadcast and config
  Hub could look after converting family command into instance command
  Task search feature could be a micro-service provided by the Hub?
    For example user can search personal history
  Tools T@skFLow could leverage:
    https://github.com/PrefectHQ/marvin 
      a batteries-included library for building AI-powered software. 
      Marvin's job is to integrate AI directly into your codebase by making it look and feel like any other function.
  Swagger for the API ?
  Refactoring with jscodeshift, see example in config repository

Architecture
------------
  How to manage multiple interfaces for a Task
      Sub-directory with sub-components and a style or theme
  Tasks can be thought of as something like plugins, maybe there are patterns in that sort of software
      Implies catalog, installation, activation, configuration, updates, permissions, resource limits
      Requires a documented API, the basic principles at the moment:
          Use the Task object to pass information
          Manage task specific storage (e.g. files, user specific data) independently of the NodeJS Task Processor Stores
  User defaults, taskflow defaults etc can be tasks
  Could add middleware that tasks can use to modify input/output (similar to LangChain)
    Currently in the TaskFunction but should be easy to factor out when that makes sense
  How does a task monitor other tasks ? Callback to monitor a thread or a task (middleware catch updates to instance store)
    Maybe tasks are responsible for their own communication protocol 
    Pattern of having the parent own the state? That allows for communication.
    In React this is fairly easy. On the NodeJS Task Processor this could be a pub-sub system. The common point is asynchronous messages.
  How to call out to Python from the Task function (better to create a Python Task and have the NodeJS Task Processor provide the environment?)
    "child process execution" with child_process library
    RabbitMQ for message passing good for a local model but do we need high speed, probably not.
    REST API would allow for remote etc, maybe better
    AMQP or MQTT would be more scalable.
  Keep server on nodejs processor - yes but for debug/admin/metrics etc
    Performance, utilization etc, a Processor Object for this (instead of Task)
    The debug features can be shared between processors e.g. just connect to keyv with activeTasks

Issues
------
  Tasks run with full NodeJS Task Processor rights. They should be sandboxed on the NodeJS Task Processor.
      TaskFunction could run in a docker container
      Each TaskFunction could be a user on Linux
          User could run in a restricted environment e.g. firejail, bubblewrap
          Difficult to stop information being shared across tasks
          Also separate by session
          How to control what information a Task can request from other tasks
            Currently limited to thread
            Should not be able to go "up" the Task hierarchy (only explore current branch)
            Can only read outputs
  Administation/monitoring of T@skFlow, could ping a service that alerts to problems

Comparison with similar systems
----------------------------
  LangChain - a framework for developing applications powered by language models.
    An abstraction above JS and Python
    Standard interface to models (could reuse this)
    Model output parsing sytem (could reuse this from TaskFunction)
    Provides stores for custom data e.g. text splitter
    The taskflow in T@skFlow is like an Agent in LangChain
  GPT-Index
    Should leverage this
  Open-AI Plugins
    This is LLM centric and will allow something similar
  Auto-GPT
    https://github.com/Significant-Gravitas/Auto-GPT
    This might be the close but their focus on autonomy is quite different
  https://github.com/modal-labs/quillman
    A complete audio chat app. Meant to serve as a starting point for your own language model-based apps.
  https://gradio.app/
    It would ideally be easy to use a Gradio component
    Embed in an iFrame
  Algovera
    Not open sourced (yet)
    Langchain as backend
    Text as primary interface for specifying taskflowsTaskflow as first class object
  https://dust.tt/
    Chaining, version control, connections
  https://www.multi.tech/ (MultiFlow)
    taskflows powered by generative models
  https://www.kubeflow.org/
    Making deployments of machine learning (ML) taskflows on Kubernetes simple, portable and scalable.
  https://n8n.io/
    This is very close to what I want
    But n8n is fair-code distributed under the Sustainable Use License and the n8n Enterprise License.
    Commercially restricted by its authors
    This led me to Node-RED
  https://nodered.org/
  Meteor
     Meteor's data synchronization mechanism known as Distributed Data Protocol (DDP).
     Messages: DDP uses a small set of message types to communicate data changes, including added, changed, removed, ready, nosub, result, updated, and more. 
  https://github.com/ParisNeo/lollms-webui
    This project aims to provide a user-friendly interface to access and utilize various LLM models for a wide range of tasks. Whether you need help with writing, coding, organizing data, generating images, or seeking answers to your questions, LoLLMS WebUI has got you covered.

Test Plan
---------
Prefill tasks so we can work on a specifc part of the sequence (inherit taskflow with tasks? Needs better recursion)

A list of features that are manually tested
-------------------------------------------
  Features:
    general
      mobile
        screen rotation X
      websocket (with and without)
      permissions X
      authentication X
      parentType X
      user
        name X
        profile X
        interface X
    menu
      user specific X
      labels X
      menu closes after select
    Tasks
      TaskStepper
        next X
        back X
        skip back X
        expand multiple X
        close step X
        scrolling X
      TaskChoose
        error
      TaskLLMIO
        input
          word count X 
        response
          word count X
      TaskShowResponse
        error
      TaskChat
      TaskConversation
        scrolling (stop the bouncing) X
        agent specific
          dyad X
          forget 
        task specific
          config 
            messagesTemplate X
            promptTemplate X
            suggestedPrompts X
            welcomeMessage X
            nextTask X
            instruction X
            nextStates X
            oneFamily X
            label X
            reentering
          request
            inputLabel 
            prompt X
            forget X
            agent X
            model X
          response
            userInput X
            text X
          model
            langModel X
            temperature X
            maxTokens X
            maxResponseTokens X
          error X
          errorTask X To test this uncomment line before return in processor/nodejs/Task/TaskLLMIO.mjs