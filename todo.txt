/* ToDo
-------
Plan: add logging via coprocessor + browser interface, testing (in particular errors)
  Logging is the first "aspect" as well as being a system Task
Coprocessing is too dispersed, needs refactoring.

Add RxJS processor - test that it can switch between coprocessor and processor role
messagesStyle http input must be diff ?
Notion of an input pipeline and output pipeline, managed by Processor
  task.config.inputPipeline = [...]
  task.config.outputPipeline = [...]
  task.config.pipeline - then task is called for both input and output
    Need to implement a queue on the task request/response ? The are no longer internal requests
    A new "request" and "response" command then the Processor can implement a queue (provide next request after previous response)
  In React the output bypasses the task but we could do something similar whereby the HoC passes the component output through the output pipeline. Could replace output.
Should task.id be task.config.id ?
  Then task.id could replace task.instanceId
Do we want to be able to configure CEP functionality?
  The Task provides state machine not CEP.
  Arguments allow for dynamic CEP function, if the CEP evals e.g., vm2, Jailed, Secure ECMAScript, Function(), AST limiting
    New command "execute" that would just pull active task out of storage
      CEP decides if the Task SM needs to be run
    See Processor README.md for mathjs etc
Dynamic task configuration
  Hub would need to be extended
  Could it dump out configurations that can be saved/reused?
  This is better than static definitions because we don't need to elaborate all possibilities in the config options
NodeJS needs a notion of request ID prefixed to logging
A Processor that is restarted does not rejoin the activeTasks ?
RxJS V7 Processor
  Experiment with CEP that causes a sync on a TaskB when fired by TaskA
    e.g. change model config in TaskChat after X interactions with TaskSimulateUser
  Experiment with CEP that starts a task e.g. TaskPopup (or maybe an option to TaskShowInstruction)
FSM
  https://github.com/statelyai/xstate to provide common FSM?
  Event processing could be on the Processor but it would not see events of Tasks on another Processor
    RxJS could be added to environment of all Tasks that we want to monitor
    Create some sort of subscription to a Task via the Hub - can we know the family ids ?
  Work directly with the XState JSON configuration and provide CRUD operation in Javascript 
    Layer of CRUD operation on JSON
      Layer of FSM CRUD operations on top
      Consider the objects Lucy supports
    Very simple parser to go from text to Javascript functions using PEG.js
    CREATE_MACHINE(id, initialState): Creates a new state machine.
    ADD_STATE(machineId, stateName, stateBehavior): Adds a new state to an existing machine.
    REMOVE_STATE(machineId, stateName): Removes a state from a machine.
    ADD_TRANSITION(machineId, sourceState, targetState, eventName): Adds a transition from one state to another on an event.
    REMOVE_TRANSITION(machineId, sourceState, eventName): Removes a transition from a state.
    UPDATE_STATE(machineId, stateName, newStateBehavior): Updates the behavior of a state. This could involve adding or removing transitions, or updating effects.
    GET_STATE(machineId, stateName): Retrieves the configuration of a state.
    Potentially FSM could be a base type like Task so we can compose from a library of stateBehavior
    Could analyse the Task to see what inputs/events are available then filter available eventNames
    Could analyse the Task to see what outputs are available then filter available stateBehaviors
    Initially just provide explicit eventNames and stateBehavior
      When a library is built we can dynamically load the event/behavior
    Events could be CEP
      Do we want a DSL for CEP ?
      Currently function with arguments
    Actions could be change to task
      Do we want a DSP for actions?
    Statecharts introduce concurrency and hierarchy but can avoid that to begin with
A scheduler should be able to provide  a cron like feature
  TaskCron
    Or can any task do this just by waiting ?
    Seems nice to be able to have  CEP that "wakes" up
    Mayb a JS library can help e.g. an array of cron times
    Maintain an array of jobs and calculate the wait time in a loop for the next wakeup
After experimenting with RxJS processor we may want to use a similar approach in React Processor
  Run RxJS in on the Shared Worker
    Eventually use this instead of lifting state
To specify behavior we have the static configuration and predefined dynamics of a Task Function
  Maybe SubTask are the right way to specify configurable dynamic functions ?
    Like what? Different state machines
      Seems too hard to make generic tasks and are tasks too "big" for some functionality
        Should we be able to configure a state machine?
          Advantage of Xstate
            Could allow for inheriting/modifying etc
              Another level of config? e.g. one task that has multiple SM versions ?
            https://lucylang.org/ A concise language for describing Finite State Machines.
            https://www.stateml.org is not released but seems to get the idea of transforming in both directions
  We do have nextTaskTemplate which allows for re-ordering SM
  There is also an idea that Tasks could be simple and composed
    This means there is no need to modify the "internals" of a Task
    It also creates a lot of repeated code in the Task Functions 
    It also means a lot of configuration to construct more complicated tasks from many components
    Supporting both seems possible.
Add schemas for task.config.local as per tasktypes.mjs and use this to check tasks in configdata
The React Processor provides a parent-child relationship for interaction. How to provide this on Node JS Processor?
  Use the RxJS TP but how does it cause an update on another Task ?
    task.command = "remoteUpdate"
      task.commandArgs = {task: {id: "id", command: "update", config: {}}}
      Add new command to Hub - should check if task is in same family ?
    Should the task stay active?
      Would also need to implement the state machine.
      Could use events
  What is the scenario when we want to do this?
    Monitoring activity across multiple Tasks
      This is perhaps the next step
Taskflows.js could be a task then would have task.user available and could remove globalState.user
Should the servicetype be copied into task.config.services?
  The servicetype is on the Processor while config is on the Hub
Should the Processor also implement rate limiting?
Ability to select a service type. This is a very simple task?
  Could allow for various ways of selecting. 
If a task is no longer in an environment then shut it down
  Would require something like a delete command sent to processors
Need to run CEP on local processor to get real-time behavior
  No rush to implement this


The cache is not going to allow a conversation if it matches and the key is not including the messages
In templating maybe we should support "task." syntax

Allow for Hub to create task configurations on the fly
  Could modify task configurations too
  Raises issues for masking - could just not mask the things we want to be able to modify
    Then allow for copying rather than creating
  Do we operate on the configuration file or on the data structure that is generated ?
  
Children could be started dynamically
  Could specify children to spawn
    Could allow parent to specify children also
      Same task can be reused in different branches (then better to specify children)
      Spawn could be a list (maybe true for all, false for none, or a list for some)
  Ths can make it much easier to add features to a Task through components ?
  By inserting a Task between parent and child e.g. between TaskConversation and TaskChat we effecively "wrap" TaskChat
    The inserted Task can modify the JSX returned by the child e.g  {modifyJSX(child)}
  This can insert something before or after the component but we can't easily modify the HTML
  React.cloneElement
Schema for tasktype to document options
Tests will allow for better code generation
Requests from other tasks via: task.processor.task.request
  See notes
If we have a TaskFilter this raises the question of how to configure/program it.
  Detects an event and passes information.
    Filter -> action
      Action is to update another task ?
        How to inform another task
        If we do want a DSL the Lua might be a good option for language indepedence
          https://github.com/fengari-lua/fengari-web
Provide sample of nginx proxy config
log not working in Chrome ?
Make some basic commands available in the console (add function to window)
  Set the userId
Standard for asynchronous APIs 
  https://www.asyncapi.com/ (standard )
Demo of collaborative chat would be good.
  In default config assign a random user label so we can demo multiparty chat
Add function to remove last paragraph
  Interesting to explore how that might be generalized
Privacy - should be implemented on the Hub
  Hub and Processors secure communication, then identification is managed on the hub.
Embedding functions in the template?
  Where/how to manage variables? 
    Lookup only the required tasks not the whole thread.
  What about use across languages?
    Logic-less might be better: Handlebars
Harmonise the Task Processor
  The infrastructure provided by the Task Processor should perform the updates to the Task object as this allows for services to be provided upon value changes.
  In React withTask HOC and useTask state.
  A common JS module for managing the Task object. 
    What is generic to Task Processors and what is custom?
      React Processor adds the concept of address/location.
When should we introduce Typescript?
  First try to simplify the code
  Maybe linting with CoPilot reduces the value of this
If we prefix a T on Task parameters it would be easier to update with search & replace
  Better to use full path even in JXS e.g. task.name not name e.g in taskflows and stepper
How can we specify the UI in a more compact/easy way?
  https://github.com/rjsf-team/react-jsonschema-form
  A hook-based solution with minimal boilerplate: React Hook Form
How to have a task deal with compound react components
  config: list of components (with names) for display&input, mapping inputs to request.name.inputs
  config: list of components (with names) for display, mapping to response.name.outputs (if it is displaying a return)
  Basic pattern is: display -> input -> display -> input (can choose to use a subset)
  Could associate components with state of the Task ?
         * -> list of components that are active all the time
    state1 -> list of active components
    state2 -> list of active components
Consider how we would add a radio select box to a component
  Add the component and a config option to display or not
  Dynamic mapping of config to the input
  Standard way of mapping this to response. Make these available as variable in next Task (or state?)
  Could have an inject command from Hub
    Modify the parent task.meta.children and modify the child task.parent etc. then 
      Modify parent should then start new child that can be configured to start previous child as its child
Option to IGNORE config options from parents
  Avoids inheriting info that is not used.
  Can just set to null to achieve this?
messagesStyle not being used yet 
Config for SubTaskLLM and oher SubTask?
  At the moment we only have SubTaskLLM and it doe not have any config (all in config.service)
  I guess it would be possible to have a SubTask config under a Task config
    Just specify as a task but use subtask name e.g. task.name = "SubTaskLLM"
    SubTask would need to be extended to make use of this 


Backlog
-------

  Bugs
  -----
  Scrolling to view suggested_prompts in TaskChat
  chatContainermaxHeight in TaskConversation scrolling

  Refactoring
  -----------
  children -> meta.children (used for tree)
  Align usage of utils

  Features
  --------
    High Priority
    -------------
    Possible next feature: remembering the system messages for Vierge
    Simplify multiple configuration files for the NodeJS Task Processor
    Use a route for configuring: user, session, taskflow, task
    Create a new route for the Client side user defaults. Manage in a global state. Send on all requests.
    Msgs could be loaded from the NodeJS Task Processor. Similar to stepper - both have history.
    Utility filters e.g. remove outer quotes, an ordered list (use a standard templating library - ejs)
    When user interacts reset the counter to try to establish websocket on client

    Low Priority
    ------------
    Show websocket connection status with traffic light icon
    Could be valuable to communicate with an instance on a subset of environments
    Ability to force a task to restart (Hub command?) Could be a forget button.
      A new conversation button once we have the session restoring.
    Modify the partial text update so it is incremental. This will better allow for text selection.
      Something like react-markdown with the gfm plugin for things like tables but you will need to do some extra work to get the code blocks styled exactly how you are wanting
    Time in oneFamily messages should be aligned with browser timezone (needs to be filled in by Hub?)
    Logout option (could just be a route)
    Sending diff to Hub from Processor during update
    JWT connection between Task Hub and Processors (currently rely on Cloudflare)
    Move to TypeScript
    Way for tasks to register websocket event handlers
    Multiple language support 'i18next-http-middleware for NodeJS Task Processor and react-i18next for React Task Processor
    Defensive programming + logging
    Websocket for tasks (so NodeJS Task Processor can drive) just send incremental info for the task
    Replace globalState with Redux
    When sending task instance only send diff (React Task Processor keeps NodeJS Task Processor copy, NodeJS Task Processor keeps React Task Processor copy)
    Add task type validation to websocket
    Only display menu option if leaf is a real task
    Check '.' is not used in keys or it breaks setNestedProperties (test if the JSON schema is now doing this)

  Tasks
  ----------
    MyAssistant -> MyAssistantConversation
    Multiple-choice above prompt to allow for quick refining of prompt e.g. use tutoiment, friendly, formal etc
    Templating with user defined variables
    Assistant to help understanding a problem rather than solving the problem
      Gamification to make learning more engaging
      An assistant to help explaining what the problem is
    Research assistant
    Refactoring assistant (provide a duplicate code environment as the Task Environment)
      Example of the refactoring provided.
      LLM to explain the refactoring
      LLM to identify which files should be refactored
      Apply refactoring
        Syntax check as code is produced? 
        Fix for syntax errors
    Fetch prompt suggestion
    Integrate https://rapidapi.com/products/api-hub/
    AI powered journal

Notes/Idea
-----
  Asking the service to output in a format that would pass a test might be a software good way of constraining prompts
    e.g. provide Python/JS code that the output should pass (e.g. a single word)
  How to interface with other apps with output from T@skFlow ?
    Windows accessibility APIs, such as UI Automation or MSAA (Microsoft Active Accessibility)
  Things will be integrated into existing clients (e.g. email)
  Educate the users to make use of the system
  Writing the Hub and a generic Porcessor in Rust
  No easy way to do this with React in the functional style
    In the future we could build components on the fly
  Could have a task.family entry which allows for broadcast and config
  Hub could look after converting "family" command into instance command
  Task search feature could be a micro-service provided by the Hub?
    For example user can search personal history
  Tools T@skFLow could leverage:
    https://github.com/PrefectHQ/marvin 
      a batteries-included library for building AI-powered software. 
      Marvin's job is to integrate AI directly into your codebase by making it look and feel like any other function.
  Swagger for the API ?
  Refactoring with jscodeshift, see example in config repository
  Should a task that requests to start a Task also be updated by the Hub?
  A GraphQL based API into the Task family may be a useful abstraction that can be offloaded to a Co-Processor

Architecture
------------
  How to manage multiple interfaces for a Task
      Sub-directory with sub-components and a style or theme
  Tasks can be thought of as something like plugins, maybe there are patterns in that sort of software
      Implies catalog, installation, activation, configuration, updates, permissions, resource limits
      Requires a documented API, the basic principles at the moment:
          Use the Task object to pass information
          Manage task specific storage (e.g. files, user specific data) independently of the NodeJS Task Processor Stores
  User defaults, taskflow defaults etc can be tasks
  Could add middleware that tasks can use to modify input/output (similar to LangChain)
    Currently in the TaskFunction but should be easy to factor out when that makes sense
      Could allow for a chain of SubTasks/Services/CEP
  How to call out to Python from the Task function (better to create a Python Task and have the NodeJS Task Processor provide the environment?)
    "child process execution" with child_process library
    RabbitMQ for message passing good for a local service but do we need high speed, probably not.
    REST API would allow for remote etc, maybe better
    AMQP or MQTT would be more scalable.
  Keep server on nodejs processor - yes but for debug/admin/metrics etc
    Performance, utilization etc, a Processor Object for this (instead of Task)
    The debug features can be shared between processors e.g. just connect to keyv with activeTasks
  Re-architect the react Processor to make use of the Service Worker API
    Should have React Hub
    Progressive Web Apps https://developer.chrome.com/docs/workbox/
    ServiceWorker will intercept any HTTP request from a client except WebSocket upgrade requests
    Workbox is built into Create React App (CRA) with a default configuration that precaches all the static assets.
      "react-scripts": "5.0.1"
    Redux State Sync might provide many of these benefits
      Have one tab that is "master" and others as slaves that pass requests to master.
      https://www.howtogeek.com/devops/how-to-sync-a-redux-store-across-browser-tabs/
      This is a different architecture in that all tabs communicate with the server and Redux is synchronized
    Could detect when more than one tab is open then route websocket from one master tab to shared worker then on to slave tabs
      https://github.com/pubkey/broadcast-channel seems good - it provides LeaderElection
      Basically the leader broadcasts what it receives on websocket and forwards what it received on the channel
        The websocket context just needs to decide which to use (depending on whether it is the leader)
        It seems OK to let the HTTP requests go through, eventaully the session could be managed by the Processor
          Then just use the thread to allow different tabs to have the same task
  Ideally we want the same code for Task storage on Hub/React/NodeJs
    Could use @kvs/node-localstorage

Issues
------
  Tasks run with full NodeJS Task Processor rights. They should be sandboxed on the NodeJS Task Processor.
    TaskFunction could run in a docker container
    Each TaskFunction could be a user on Linux
        User could run in a restricted environment e.g. firejail, bubblewrap
        Difficult to stop information being shared across tasks
        Also separate by session
        How to control what information a Task can request from other tasks
          Currently limited to thread
          Should not be able to go "up" the Task hierarchy (only explore current branch)
          Can only read outputs
  Administation/monitoring of T@skFlow, could ping a service that alerts to problems

Comparison with similar systems
----------------------------
  LangChain - a framework for developing applications powered by language models.
    An abstraction above JS and Python
    Standard interface to models (could reuse this)
    service output parsing sytem (could reuse this from TaskFunction)
    Provides stores for custom data e.g. text splitter
    The taskflow in T@skFlow is like an Agent in LangChain
  GPT-Index
    Should leverage this
  Open-AI Plugins
    This is LLM centric and will allow something similar
  Auto-GPT
    https://github.com/Significant-Gravitas/Auto-GPT
    This might be the close but their focus on autonomy is quite different
  https://github.com/modal-labs/quillman
    A complete audio chat app. Meant to serve as a starting point for your own language model-based apps.
  https://gradio.app/
    It would ideally be easy to use a Gradio component
    Embed in an iFrame
  Algovera
    Not open sourced (yet)
    Langchain as backend
    Text as primary interface for specifying taskflowsTaskflow as first class object
  https://dust.tt/
    Chaining, version control, connections
  https://www.multi.tech/ (MultiFlow)
    taskflows powered by generative models
  https://www.kubeflow.org/
    Making deployments of machine learning (ML) taskflows on Kubernetes simple, portable and scalable.
  https://n8n.io/
    This is very close to what I want
    But n8n is fair-code distributed under the Sustainable Use License and the n8n Enterprise License.
    Commercially restricted by its authors
    This led me to Node-RED
  https://nodered.org/
  Meteor
     Meteor's data synchronization mechanism known as Distributed Data Protocol (DDP).
     Messages: DDP uses a small set of message types to communicate data changes, including added, changed, removed, ready, nosub, result, updated, and more. 
  https://github.com/ParisNeo/lollms-webui
    This project aims to provide a user-friendly interface to access and utilize various LLM models for a wide range of tasks. Whether you need help with writing, coding, organizing data, generating images, or seeking answers to your questions, LoLLMS WebUI has got you covered.

Test Plan
---------
Prefill tasks so we can work on a specifc part of the sequence.
If we stub the services and use a teset task for monitoring behavior in the browser then we could have system tests.
Need to look more into testing React apps
Testing should be a task

Features that are manually tested
---------------------------------
  Features:
    general
      mobile
        screen rotation X
      websocket (with and without)
      permissions X
      authentication X
      parentName X
      user
        name X
        profile X
        interface X
    menu
      user specific X
      labels X
      menu closes after select
    Tasks
      TaskStepper
        next X
        back X
        skip back X
        expand multiple X
        close step X
        scrolling X
      TaskChoose
        error
      TaskLLMIO
        input
          word count X 
        response
          word count X
      TaskShowInstruction
        error
      TaskChat
      TaskConversation
        scrolling (stop the bouncing) X
        agent specific
          dyad X
          forget 
        task specific
          config 
            messagesTemplate X
            promptTemplate X
            suggestedPrompts X
            welcomeMessage X
            nextTask X
            instruction X
            nextStates X
            oneFamily X
            label X
            reentering
          request
            inputLabel 
            prompt X
            forget X
            agent X
            service X
          response
            userInput X
            text X
          service
            langModel X
            temperature X
            maxTokens X
            maxResponseTokens X
          error X
          errorTask X To test this uncomment line before return in processor/nodejs/Task/TaskLLMIO.mjs